@namespace BlazorUI
@page "/UsersPage"
@inherits LzComponentBasePassViewModel<TenantUsersViewModel>
@inject ICurrentSessionViewModel CurrentSessionViewModel
@inject NavigationManager NavigationManager


<h3>UsersPage</h3>
@if (ViewModel!.IsLoading)
{
    <Busy />
}
else
{
    <MudCard>
        <MudCardContent>
            <MudTable T="TenantUserModel"
            Items="@ViewModel.ViewModels.Values.Select(x => x.Data)">
                <HeaderContent>
                    <MudTh>Login</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Default" OnClick="AddUser" />
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Username">@context.Login</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <mudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditUser(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="@(() => DeleteUser(context))" />
                    </mudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="UsersReloadAsync">Reload</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    [Inject] ISnackbar? Snackbar { get; set; }
    private MudTable<TenantUserModel> table = new MudTable<TenantUserModel>();
    private string testString = string.Empty;

    protected override async void OnInitialized()
    {
        ViewModel = CurrentSessionViewModel!.TenantUsersViewModel;
        await UsersReloadAsync();
        base.OnInitialized();
    }

    private void AddUser()
    {
        NavigationManager.NavigateTo("UserEditPage");
    }

    private void EditUser(TenantUserModel user)
    {
        var viewModel = ViewModel!.CurrentViewModel = ViewModel!.EditViewModel = ViewModel.ViewModels[user.Id];
        NavigationManager.NavigateTo("UserEditPage");
    }   
    
    private async Task DeleteUser(TenantUserModel user)
    {
        var viewModel = ViewModel!.ViewModels[user.Id];
        var (success, msg) = await viewModel.DeleteAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
    }   
    private async Task UsersReloadAsync()
    {
        var (success, msg) = await ViewModel!.ReadAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
    }
}