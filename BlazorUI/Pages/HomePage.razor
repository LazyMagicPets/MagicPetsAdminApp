@namespace BlazorUI
@page "/HomePage"
@*
    CoreComponentBaseAssignViewModel<T> : LzReactiveComponentBaseAssignViewModel<T>
    LzReactiveComponentBaseAssignViewModel<T> : ComponentBase, IViewFor<T>, INotifyPropertyChanged, ICanActivate, IDisposable
    CoreComponentBaseAssignViewModel instruments the component with ReactiveUI bindings making it easy to implement MVVM with Blazor.
    See also: 
        CoreComponentBase<T> - view model injected directly
        CoreComponentBasePassViewModel<T> - view model passed as parameter
*@
@inherits LzCoreComponentBaseAssignViewModel<ISessionViewModel>

@*
    SessionsViewModel
    Most pages inject ISessionsViewModel and the ISessionModel is assigned in the OnInitializedAsync method
        ViewModel = SessionsViewModel.SessionViewModel
    Note: The bindings of the component to the underlying view model, (in this case ISessionViewModel),
    are one-to-one. You can't bind multiple view models to a single component. This is a limitation imposed by
    the underlying ReactiveUI ReactiveComponentBase class. Generally, this is a good thing. If you find you are 
    trying to use multiple view models in the same component, it's a good indication you need another component.
*@
@inject ISessionsViewModel SessionsViewModel

<MudPaper Class="d-flex align-start flex-grow-1">
    <MudCard Outlined="true" Class="flex-initial" Width="45%" Elevation="0">
        <MudCardContent Class="d-flex flex-column">
            @if (ViewModel!.IsSignedIn)
            {
                <h1>Welcome, @ViewModel!.AuthProcess?.Login</h1>
                <ClientInfoCard ViewModel="@ViewModel!.CallerInfo" />
            }
            else
            {
                <h1>Hi there, lets get connected!</h1>
            }
            <LzAuth ViewModel="@ViewModel!.AuthProcess" />
        </MudCardContent>
        <MudCardActions Class="d-flex align-content-start flex-wrap flex-grow-1 gap-1">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OnWSConnect())">WebSocket Connect</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OnSendMessage())">WebSocket Message</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OnWSDisconnect())">WebSocket Disconnect</MudButton>
        </MudCardActions>
    </MudCard>
</MudPaper>

@code {
    protected override async Task OnInitializedAsync()
    {

        ViewModel = SessionsViewModel.SessionViewModel;
        await base.OnInitializedAsync();
    }
    private async Task OnWSConnect() 
    {
        if (ViewModel?.NotificationsSvc is null) return;
        await ViewModel.NotificationsSvc!.ConnectAsync();
    }
    private async Task OnWSDisconnect()
    {
        if (ViewModel?.NotificationsSvc is null) return;
        await ViewModel!.NotificationsSvc.DisconnectAsync();
    }
    private async Task OnSendMessage()
    {
        if (ViewModel?.NotificationsSvc is null) return;
        await ViewModel!.NotificationsSvc.SendAsync("test message");
    }
    private async Task OnGetJwt()
    {
        if (ViewModel?.AuthProcess is null) return;
        var jwt = await ViewModel!.AuthProcess.GetJWTAsync();
        Console.WriteLine("JWT:" + jwt);
    }
}